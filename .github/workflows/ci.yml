name: MCP Test Environment CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  MCP_ENVIRONMENT: 'ci'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Lint and Format Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        pip install -r requirements.txt
    
    - name: Run Black
      run: black --check --diff .
    
    - name: Run isort
      run: isort --check-only --diff .
    
    - name: Run flake8
      run: flake8 . --count --max-line-length=100 --statistics
    
    - name: Run mypy
      run: mypy --ignore-missing-imports .

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run unit tests
      run: |
        pytest tests/test_tools_functions.py -v --cov=server_side --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    strategy:
      matrix:
        test-suite: [integration, performance]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run integration tests
      run: |
        python tests/run_tests.py --suite ${{ matrix.test-suite }} --mock --output-dir ./test-reports-${{ matrix.test-suite }}
    
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.test-suite }}
        path: ./test-reports-${{ matrix.test-suite }}/

  stress-tests:
    runs-on: ubuntu-latest
    name: Stress Tests
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'stress-test')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run stress tests
      run: |
        python tests/run_tests.py --suite stress --mock --output-dir ./test-reports-stress
    
    - name: Upload stress test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-stress
        path: ./test-reports-stress/

  docker-tests:
    runs-on: ubuntu-latest
    name: Docker Integration Tests
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        make build
    
    - name: Start services with Docker Compose
      run: |
        # Create .env file for testing
        echo "AWS_ACCESS_KEY_ID=test" >> .env
        echo "AWS_SECRET_ACCESS_KEY=test" >> .env
        echo "AWS_SESSION_TOKEN=test" >> .env
        
        # Start services
        docker-compose up -d
        
        # Wait for services to be ready
        sleep 30
    
    - name: Test service health
      run: |
        # Test server health
        curl -f http://localhost:8000/health || exit 1
        
        # Test client interface
        curl -f http://localhost:7860 || exit 1
    
    - name: Check service logs
      if: always()
      run: |
        docker-compose logs server
        docker-compose logs agent
        docker-compose logs client
    
    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run Safety check
      run: safety check
    
    - name: Run Bandit security scan
      run: bandit -r . -f json -o bandit-report.json
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  performance-benchmarks:
    runs-on: ubuntu-latest
    name: Performance Benchmarks
    needs: integration-tests
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        python tests/run_tests.py --suite performance --output-dir ./benchmark-reports
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-reports
        path: ./benchmark-reports/

  deploy-test-reports:
    runs-on: ubuntu-latest
    name: Deploy Test Reports
    needs: [integration-tests, stress-tests, performance-benchmarks]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
    
    - name: Combine test reports
      run: |
        mkdir -p combined-reports
        find . -name "*.json" -path "*/test-reports*" -exec cp {} combined-reports/ \;
        find . -name "*.txt" -path "*/test-reports*" -exec cp {} combined-reports/ \;
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./combined-reports
        destination_dir: test-reports
